//  * 1. float all columns left
//  * 2. min height so they don't collapse if empty
//  * 3. Set left and right padding to 1/2 gutter size

.style-cols() {
    .float-cols(@index) {
        @list: ~".mobile-@{index}, .tablet-@{index}, .desktop-@{index}, .widescreen-@{index}";
        .float-cols((@index + 1), @list)
    }

    // guarded function to stop after column index is expended
    .float-cols(@index, @elements) when (@index =< @column-index) {
        @list: ~".mobile-@{index}, .tablet-@{index}, .desktop-@{index}, .widescreen-@{index}";
        // recursive function call, add lists together
        .float-cols((@index + 1), ~"@{elements}, @{list}");
    }

    .float-cols(@index, @elements) when (@index > @column-index) {
        @{elements} {
            position: relative;
            min-height: 1px;
            padding-left: (@gutter / 2);
            padding-right: (@gutter / 2);
            float: left;
        }
    }
    .float-cols(1) // start it off
}

// Generate column widths
// param query is device name, ie mobile tablet desktop
.generate-columns(@query) {
    .build(@query) {
        @column: ~".@{query}-@{column-index}";
        @offset: ~".offset-@{query}-@{column-index}";
        @push: ~".push-@{query}-@{column-index}";
        @{column} { width: 100% }
        @{offset} { margin-left: 100% }
        @{push} { margin-right: 100% }
        .build(@query, (@column-index - 1))
    }
    .build(@query, @index) when (@index >= 1) {
        @column: ~".@{query}-@{index}";
        @offset: ~".offset-@{query}-@{column-index}";
        @push: ~".push-@{query}-@{column-index}";
        @build-size: ((100%/@column-index) * (@index));
        @{column} { width: @build-size; }
        @{offset} { margin-left: @build-size }
        @{push} { margin-right: @build-size }
        .build(@query, (@index - 1));
    }
    .build(@query);
}